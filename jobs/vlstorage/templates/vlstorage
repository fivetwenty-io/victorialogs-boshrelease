#!/bin/bash
set -e

export DOCKER_HOST=unix:///var/vcap/sys/run/docker/docker.sock
CONTAINER_NAME="vlstorage-<%= spec.id %>"
IMAGE="<%= p('vlstorage.container_image') %>"
PORT=<%= p('vlstorage.port') %>
STORAGE_PATH="<%= p('vlstorage.storage_path') %>"
RETENTION_PERIOD="<%= p('vlstorage.retention_period') %>"
MEMORY_LIMIT="<%= p('vlstorage.memory_limit') %>"
LOG_LEVEL="<%= p('vlstorage.log_level') %>"
HTTP_AUTH_USERNAME="<%= p('vlstorage.http_auth_username') %>"
HTTP_AUTH_PASSWORD="<%= p('vlstorage.http_auth_password') %>"

# Wait for Docker to be ready
echo "[$(date '+%H:%M:%S')] VLStorage: Waiting for Docker daemon..."
DOCKER_READY_FILE=/var/vcap/sys/run/ready/docker
max_wait=120
elapsed=0

while [ ! -f "$DOCKER_READY_FILE" ] && [ $elapsed -lt $max_wait ]; do
    sleep 1
    elapsed=$((elapsed + 1))
done

if [ ! -f "$DOCKER_READY_FILE" ]; then
    echo "[$(date '+%H:%M:%S')] ERROR: Docker daemon not ready after ${max_wait}s"
    exit 1
fi

# Additional verification that Docker is actually responsive
if ! docker info >/dev/null 2>&1; then
    echo "[$(date '+%H:%M:%S')] ERROR: Docker daemon not responding"
    exit 1
fi

echo "[$(date '+%H:%M:%S')] Docker daemon is ready"

# Pull VLStorage image
echo "[$(date '+%H:%M:%S')] Pulling VLStorage image: $IMAGE"
if ! docker pull "$IMAGE"; then
    echo "[$(date '+%H:%M:%S')] ERROR: Failed to pull VLStorage image"
    exit 1
fi

# Stop and remove existing container if it exists
echo "[$(date '+%H:%M:%S')] Checking for existing VLStorage container..."
if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
    echo "[$(date '+%H:%M:%S')] Stopping existing container..."
    docker stop "$CONTAINER_NAME" || true
    echo "[$(date '+%H:%M:%S')] Removing existing container..."
    docker rm "$CONTAINER_NAME" || true
fi

# Build docker run command
DOCKER_CMD="docker run -d \
  --name $CONTAINER_NAME \
  --restart unless-stopped \
  -p ${PORT}:9491 \
  -v ${STORAGE_PATH}:/victoria-logs-data \
  --memory=${MEMORY_LIMIT} \
  $IMAGE"

# Add VLStorage arguments
DOCKER_CMD="$DOCKER_CMD -httpListenAddr=:9491"
DOCKER_CMD="$DOCKER_CMD -storageDataPath=/victoria-logs-data"
DOCKER_CMD="$DOCKER_CMD -retentionPeriod=${RETENTION_PERIOD}"
DOCKER_CMD="$DOCKER_CMD -loggerLevel=${LOG_LEVEL}"
DOCKER_CMD="$DOCKER_CMD -loggerFormat=json"
DOCKER_CMD="$DOCKER_CMD -envflag.enable=true"

# Add HTTP auth if configured
if [ -n "$HTTP_AUTH_USERNAME" ] && [ -n "$HTTP_AUTH_PASSWORD" ]; then
    DOCKER_CMD="$DOCKER_CMD -httpAuth.username=${HTTP_AUTH_USERNAME}"
    DOCKER_CMD="$DOCKER_CMD -httpAuth.password=${HTTP_AUTH_PASSWORD}"
fi

# Start VLStorage container
echo "[$(date '+%H:%M:%S')] Starting VLStorage container..."
eval "$DOCKER_CMD"

# Wait for container to be healthy
echo "[$(date '+%H:%M:%S')] Waiting for VLStorage to be healthy..."
max_wait=60
elapsed=0

while [ $elapsed -lt $max_wait ]; do
    if docker ps --filter "name=${CONTAINER_NAME}" --filter "status=running" | grep -q "$CONTAINER_NAME"; then
        # Check if VLStorage API is responsive
        if curl -sf "http://localhost:${PORT}/health" >/dev/null 2>&1; then
            echo "[$(date '+%H:%M:%S')] VLStorage is healthy"
            break
        fi
    fi
    sleep 1
    elapsed=$((elapsed + 1))
done

if [ $elapsed -ge $max_wait ]; then
    echo "[$(date '+%H:%M:%S')] ERROR: VLStorage failed to become healthy"
    docker logs "$CONTAINER_NAME" || true
    exit 1
fi

echo "[$(date '+%H:%M:%S')] VLStorage started successfully"
echo "[$(date '+%H:%M:%S')] API available at http://localhost:${PORT}"

# Keep the script running and monitor the container
while true; do
    if ! docker ps --filter "name=${CONTAINER_NAME}" --filter "status=running" | grep -q "$CONTAINER_NAME"; then
        echo "[$(date '+%H:%M:%S')] ERROR: VLStorage container stopped unexpectedly"
        docker logs --tail 50 "$CONTAINER_NAME" || true
        exit 1
    fi
    sleep 10
done
