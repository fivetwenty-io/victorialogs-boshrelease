#!/bin/bash
set -e

export DOCKER_HOST=unix:///var/vcap/sys/run/docker/docker.sock
CONTAINER_NAME="victorialogs"
IMAGE="<%= p('victorialogs.container_image') %>"
PORT="<%= p('victorialogs.port') %>"
STORAGE_PATH="<%= p('victorialogs.storage_path') %>"
RETENTION_PERIOD="<%= p('victorialogs.retention_period') %>"
MEMORY_LIMIT="<%= p('victorialogs.memory_limit') %>"
LOG_LEVEL="<%= p('victorialogs.log_level') %>"
HTTP_AUTH_USERNAME="<%= p('victorialogs.http_auth_username') %>"
HTTP_AUTH_PASSWORD="<%= p('victorialogs.http_auth_password') %>"
MAX_CONCURRENT_INSERTS="<%= p('victorialogs.max_concurrent_inserts') %>"
INSERT_RATE_LIMIT="<%= p('victorialogs.insert_rate_limit') %>"

# Wait for Docker to be ready
echo "[$(date '+%H:%M:%S')] VictoriaLogs: Waiting for Docker daemon..."
DOCKER_READY_FILE=/var/vcap/sys/run/ready/docker
max_wait=120
elapsed=0

while [ ! -f "$DOCKER_READY_FILE" ] && [ $elapsed -lt $max_wait ]; do
  sleep 1
  elapsed=$((elapsed + 1))
done

if [ ! -f "$DOCKER_READY_FILE" ]; then
  echo "[$(date '+%H:%M:%S')] ERROR: Docker daemon not ready after ${max_wait}s"
  exit 1
fi

# Additional verification that Docker is actually responsive
if ! docker info >/dev/null 2>&1; then
  echo "[$(date '+%H:%M:%S')] ERROR: Docker daemon not responding"
  exit 1
fi

echo "[$(date '+%H:%M:%S')] Docker daemon is ready"

# Pull VictoriaLogs image
echo "[$(date '+%H:%M:%S')] Pulling VictoriaLogs image: $IMAGE"
if ! docker pull "$IMAGE"; then
  echo "[$(date '+%H:%M:%S')] ERROR: Failed to pull VictoriaLogs image"
  exit 1
fi

# Stop and remove existing container if it exists
echo "[$(date '+%H:%M:%S')] Checking for existing VictoriaLogs container..."
if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
  echo "[$(date '+%H:%M:%S')] Stopping existing container..."
  docker stop "$CONTAINER_NAME" || true
  echo "[$(date '+%H:%M:%S')] Removing existing container..."
  docker rm "$CONTAINER_NAME" || true
fi

# Build docker run command
DOCKER_CMD="docker run -d \
  --name $CONTAINER_NAME \
  --restart unless-stopped \
  -p ${PORT}:9428 \
  -p 514:514 \
  -v ${STORAGE_PATH}:/victoria-logs-data \
  --memory=${MEMORY_LIMIT} \
  $IMAGE"

# Add VictoriaLogs arguments
DOCKER_CMD="$DOCKER_CMD -storageDataPath=/victoria-logs-data"
DOCKER_CMD="$DOCKER_CMD -retentionPeriod=${RETENTION_PERIOD}"
DOCKER_CMD="$DOCKER_CMD -loggerLevel=${LOG_LEVEL}"
DOCKER_CMD="$DOCKER_CMD -maxConcurrentInserts=${MAX_CONCURRENT_INSERTS}"
DOCKER_CMD="$DOCKER_CMD -syslog.listenAddr.tcp=:514"

if [ "$INSERT_RATE_LIMIT" -gt 0 ]; then
  DOCKER_CMD="$DOCKER_CMD -insert.maxQueueDuration=1m"
fi

# Add HTTP auth if configured
if [ -n "$HTTP_AUTH_USERNAME" ] && [ -n "$HTTP_AUTH_PASSWORD" ]; then
  DOCKER_CMD="$DOCKER_CMD -httpAuth.username=${HTTP_AUTH_USERNAME}"
  DOCKER_CMD="$DOCKER_CMD -httpAuth.password=${HTTP_AUTH_PASSWORD}"
fi

# Start VictoriaLogs container
echo "[$(date '+%H:%M:%S')] Starting VictoriaLogs container..."
eval "$DOCKER_CMD"

# Wait for container to be healthy
echo "[$(date '+%H:%M:%S')] Waiting for VictoriaLogs to be healthy..."
max_wait=60
elapsed=0

while [ $elapsed -lt $max_wait ]; do
  if docker ps --filter "name=${CONTAINER_NAME}" --filter "status=running" | grep -q "$CONTAINER_NAME"; then
    # Check if VictoriaLogs API is responsive
    if curl -sf "http://localhost:${PORT}/health" >/dev/null 2>&1; then
      echo "[$(date '+%H:%M:%S')] VictoriaLogs is healthy"
      break
    fi
  fi
  sleep 1
  elapsed=$((elapsed + 1))
done

if [ $elapsed -ge $max_wait ]; then
  echo "[$(date '+%H:%M:%S')] ERROR: VictoriaLogs failed to become healthy"
  docker logs "$CONTAINER_NAME" || true
  exit 1
fi

echo "[$(date '+%H:%M:%S')] VictoriaLogs started successfully"
echo "[$(date '+%H:%M:%S')] API available at http://localhost:${PORT}"

# Keep the script running and monitor the container
while true; do
  if ! docker ps --filter "name=${CONTAINER_NAME}" --filter "status=running" | grep -q "$CONTAINER_NAME"; then
    echo "[$(date '+%H:%M:%S')] ERROR: VictoriaLogs container stopped unexpectedly"
    docker logs --tail 50 "$CONTAINER_NAME" || true
    exit 1
  fi
  sleep 10
done
